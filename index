<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Alkhulafau SHS Student Management</title>

  <!-- Manifest for PWA -->
  <link rel="manifest" href="manifest.json">
  <meta name="theme-color" content="#722f37">

  <style>
    /* keep your existing CSS, but add these enhancements */

    :root {
      --wine: #722f37;
      --white: #fff;
      --dark-gray: #222;
      --light-bg: #f5f5f5;
      --dark-bg: #1a1a1a;
    }

    body.dark {
      background-color: var(--dark-bg);
      color: var(--white);
    }

    .theme-toggle {
      cursor: pointer;
      border: none;
      background: none;
      font-size: 1.2rem;
      color: var(--white);
    }

    /* Toast notification style */
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: var(--wine);
      color: var(--white);
      padding: 1rem 1.5rem;
      border-radius: 6px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.2);
      display: none;
      animation: fadeInOut 3s ease;
    }

    @keyframes fadeInOut {
      0% {opacity: 0; transform: translateY(10px);}
      10% {opacity: 1; transform: translateY(0);}
      90% {opacity: 1;}
      100% {opacity: 0; transform: translateY(10px);}
    }

    /* Modal (for edit/delete confirmation) */
    .modal {
      position: fixed;
      inset: 0;
      background: rgba(0,0,0,0.6);
      display: none;
      justify-content: center;
      align-items: center;
    }
    .modal.active { display: flex; }
    .modal-content {
      background: var(--white);
      padding: 2rem;
      border-radius: 8px;
      max-width: 400px;
      text-align: center;
    }
  </style>
</head>

<body>
  <header>
    <div class="container header-content">
      <h1>Alkhulafau SHS Student Management</h1>
      <div>
        <button id="installBtn" style="display:none;">Install App</button>
        <button id="themeToggle" class="theme-toggle">🌙</button>
      </div>
    </div>
  </header>

  <main class="container">
    <div class="page active" id="dashboard">
      <h2>Dashboard</h2>
      <canvas id="chartStudents" height="150"></canvas>
      <div class="actions">
        <button id="backupBtn">Backup Data</button>
        <button id="restoreBtn">Restore Backup</button>
      </div>
    </div>

    <!-- Keep your existing Upload and Search pages -->
  </main>

  <div class="toast" id="toast"></div>

  <!-- Modal -->
  <div class="modal" id="modal">
    <div class="modal-content">
      <p id="modalMessage">Are you sure?</p>
      <button id="modalConfirm">Yes</button>
      <button id="modalCancel">Cancel</button>
    </div>
  </div>

  <footer>
    <p>&copy; 2025 Alkhulafau SHS. All Rights Reserved.</p>
  </footer>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>

  <script>
    // --- THEME TOGGLE ---
    const themeToggle = document.getElementById('themeToggle');
    const currentTheme = localStorage.getItem('theme') || 'light';
    document.body.classList.toggle('dark', currentTheme === 'dark');
    themeToggle.textContent = currentTheme === 'dark' ? '☀️' : '🌙';

    themeToggle.addEventListener('click', () => {
      const isDark = document.body.classList.toggle('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
      themeToggle.textContent = isDark ? '☀️' : '🌙';
    });

    // --- TOAST MESSAGE ---
    function showToast(msg) {
      const toast = document.getElementById('toast');
      toast.textContent = msg;
      toast.style.display = 'block';
      setTimeout(() => toast.style.display = 'none', 3000);
    }

    // --- INSTALL PROMPT (PWA) ---
    let deferredPrompt;
    window.addEventListener('beforeinstallprompt', (e) => {
      e.preventDefault();
      deferredPrompt = e;
      document.getElementById('installBtn').style.display = 'inline-block';
    });
    document.getElementById('installBtn').addEventListener('click', async () => {
      deferredPrompt.prompt();
      const { outcome } = await deferredPrompt.userChoice;
      if (outcome === 'accepted') showToast('App installed successfully!');
      deferredPrompt = null;
    });

    // --- BACKUP & RESTORE ---
    const backupBtn = document.getElementById('backupBtn');
    const restoreBtn = document.getElementById('restoreBtn');

    backupBtn.addEventListener('click', () => {
      const data = {
        students: JSON.parse(localStorage.getItem('alkhulafauStudents') || '[]'),
        headers: JSON.parse(localStorage.getItem('alkhulafauHeaders') || '[]'),
      };
      const blob = new Blob([JSON.stringify(data)], { type: 'application/json' });
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = 'alkhulafau_backup.json';
      a.click();
      showToast('Backup downloaded');
    });

    restoreBtn.addEventListener('click', () => {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.json';
      input.onchange = (e) => {
        const file = e.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = (event) => {
          try {
            const data = JSON.parse(event.target.result);
            localStorage.setItem('alkhulafauStudents', JSON.stringify(data.students));
            localStorage.setItem('alkhulafauHeaders', JSON.stringify(data.headers));
            showToast('Backup restored successfully!');
          } catch {
            showToast('Invalid backup file!');
          }
        };
        reader.readAsText(file);
      };
      input.click();
    });

    // --- CHART EXAMPLE (Students by Year) ---
    const ctx = document.getElementById('chartStudents');
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['2021', '2022', '2023', '2024'],
        datasets: [{
          label: 'Total Students',
          data: [120, 140, 160, 180],
          backgroundColor: '#722f37'
        }]
      }
    });
  </script>
</body>
</html>
